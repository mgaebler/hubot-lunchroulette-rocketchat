RocketChatResponse {
  robot:
   Robot {
     adapterPath: '/immonet_git/private/playground/rocketbot/node_modules/hubot/src/adapters',
     name: 'bot',
     events:
      EventEmitter {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined },
     brain:
      Brain {
        data: [Object],
        autoSave: false,
        saveInterval: [Object],
        _events: [Object],
        _eventsCount: 2 },
     alias: false,
     adapter:
      RocketChatBotAdapter {
        callMethod: [Function],
        reply: [Function],
        sendDirect: [Function],
        customMessage: [Function],
        send: [Function],
        run: [Function],
        robot: [Circular],
        _events: {},
        _eventsCount: 0,
        lastts: 2016-08-03T19:06:46.352Z,
        chatdriver: [Object] },
     Response: { [Function: RocketChatResponse] __super__: [Object] },
     commands:
      [ 'hubot ping - Reply with pong',
        'hubot adapter - Reply with the adapter',
        'hubot echo <text> - Reply back with <text>',
        'hubot time - Reply with current time',
        'hubot help - Displays all of the help commands that Hubot knows about.',
        'hubot help <query> - Displays all help commands that match <query>.',
        'hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.',
        'hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.',
        'hubot mustache me <url|query> - Adds a mustache to the specified URL or query result.',
        'hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.',
        'hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional',
        'hubot pug me - Receive a pug',
        'hubot pug bomb N - get N pugs',
        'hubot map me <query> - Returns a map view of the area returned by `query`.',
        'hubot the rules - Make sure hubot still knows the rules.',
        'ship it - Display a motivation squirrel' ],
     listeners:
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     middleware: { listener: [Object], response: [Object], receive: [Object] },
     logger: EventEmitter { level: 6, stream: [Object] },
     pingIntervalId: null,
     globalHttpOptions: {},
     version: '2.19.0',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 0,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:0.0.0.0:8080' },
     router:
      { [Function: app]
        use: [Function],
        handle: [Function],
        listen: [Function],
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        route: '/',
        stack: [Object],
        init: [Function],
        defaultConfiguration: [Function],
        engine: [Function],
        param: [Function],
        set: [Function],
        path: [Function],
        enabled: [Function],
        disabled: [Function],
        enable: [Function],
        disable: [Function],
        configure: [Function],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function],
        del: [Function],
        render: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        settings: [Object],
        engines: {},
        _eventsCount: 1,
        _router: [Object],
        routes: [Object],
        router: [Getter],
        locals: [Object],
        _usedRouter: true },
     adapterName: 'rocketchat',
     errorHandlers: [],
     onUncaughtException: [Function] },
  message:
   TextMessage {
     user: User { id: 'ewzJwjriQ4sJQiDSG', name: 'madeagle', room: 'GENERAL' },
     text: '@bot: foo',
     id: '3TRdQhyx6Fz9FYpv3',
     done: false,
     room: 'GENERAL' },
  match: [ '@bot: foo', index: 0, input: '@bot: foo' ],
  envelope:
   { room: 'GENERAL',
     user: User { id: 'ewzJwjriQ4sJQiDSG', name: 'madeagle', room: 'GENERAL' },
     message:
      TextMessage {
        user: [Object],
        text: '@bot: foo',
        id: '3TRdQhyx6Fz9FYpv3',
        done: false,
        room: 'GENERAL' } } }
